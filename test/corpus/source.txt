==================
 Return statements
==================

int x() {
  return 1;
}

---
 (source_file
    (function_definition
       (function_declarator (type_specifier) (identifier))
          (compound_statement
            (statement_list
              (statement (return_start (return)) (expression (integer)))))))

==================
Empty function
==================

void main(){
}

---
 (source_file
   (function_definition
     (function_declarator (type_specifier) (identifier))
       (compound_statement)))

==================
Global declaration
==================

const string sName = "String";
const int nCount;
const float fVar = 3.1415;
int b;

void main(){

}
---
 (source_file
   (declaration (type_specifier) (identifier) (string_const))
   (declaration (type_specifier) (identifier))
   (declaration (type_specifier) (identifier) (float))
   (declaration (type_specifier) (identifier))
   (function_definition
     (function_declarator (type_specifier) (identifier))
       (compound_statement)))

==================
Function Parameters
==================

int foobar(int foo, int bar){
  return(foo + bar);
}

---
 (source_file
   (function_definition
     (function_declarator (type_specifier) (identifier) (function_parameter_list (type_specifier) (identifier) (type_specifier) (identifier)))
       (compound_statement
         (statement_list
           (statement (return_start (return))
             (expression
               (expression (identifier) (identifier))))))))

==================
Parameters with default values
==================

string MyName(string sFirst, string sLast = "Smith"){
  return(sFirst + sLast);
}

---
 (source_file
   (function_definition
     (function_declarator (type_specifier) (identifier) (function_parameter_list (type_specifier) (identifier) (type_specifier) (identifier) (string_const)))
       (compound_statement
         (statement_list
           (statement (return_start (return))
             (expression (expression (identifier) (identifier))))))))

==================
Function calls
==================
void main(){
  a = Foo(bar);
  Baz(a, c, "This string");
}
---
  (source_file
    (function_definition
      (function_declarator (type_specifier) (identifier))
        (compound_statement
          (statement_list
            (statement
              (expression_statement
                (expression (identifier) (assignment_operator)
                  (function_call (identifier) (argument_expression_list (identifier))))))
            (statement
              (expression_statement
                (expression
                  (function_call (identifier) (argument_expression_list (identifier) (identifier) (string_const))))))))))


==================
More function calls
==================

void main()
{
   SetLocalString("FROM_CURRENCY", "goblin");
}

---
 (source_file
   (function_definition
     (function_declarator (type_specifier) (identifier))
       (compound_statement
         (statement_list
           (statement (expression_statement
             (expression
               (function_call (identifier)
                 (argument_expression_list
                   (string_const) (string_const))))))))))


==================
Comments
==================

// This function does nothing
void nothing(){

}

/*
This function does something
*/
int something(float fNum){
  return(fNum * 3.0);
}

---
(source_file
  (comment)
  (function_definition
    (function_declarator (type_specifier) (identifier)) (compound_statement))
  (comment)
  (function_definition
    (function_declarator (type_specifier) (identifier) (function_parameter_list (type_specifier) (identifier)))
      (compound_statement
        (statement_list
          (statement (return_start (return))
            (expression (expression (identifier) (float))))))))

==================
Comments in other places
==================

// This function does nothing
int nothing(){ // A comment here
  /* Comment in a function */
   return(0);
} // Comment after
---
  (source_file
    (comment)
    (function_definition
      (function_declarator (type_specifier) (identifier))
      (compound_statement
        (statement_list
        (statement (comment))
        (statement (comment))
        (statement (return_start (return))
        (expression (expression (integer)))))))
        (comment))

==================
Preprocessor directives
==================

#include "some_file"

---
(source_file
  (preprocessor_directive (pre_include) (string_const)))


==================
Built in constants
==================

object oInvalid = OBJECT_INVALID;
object oSelf = OBJECT_SELF;

int nTrue = TRUE;
int nFalse = FALSE;

---
(source_file
 (declaration (type_specifier) (identifier) (object_invalid_const))
 (declaration (type_specifier) (identifier) (object_self_const))
 (declaration (type_specifier) (identifier) (true_const))
 (declaration (type_specifier) (identifier) (false_const)))

==================
Define
==================

#define FOO_BAR    baz
#define BAR_BAR    5

---
 (source_file
   (preprocessor_directive (pre_define) (identifier) (identifier))
   (preprocessor_directive (pre_define) (identifier) (integer)))

=================
Function Prototype
=================
void PrintObject(object oObject);

---
 (source_file (function_prototype (function_declarator (type_specifier) (identifier) (function_parameter_list (type_specifier) (identifier)))))

=================
Action Type
=================

void AssignCommand(object oActionSubject, action aActionToAssign);

---

 (source_file (function_prototype (function_declarator (type_specifier) (identifier) (function_parameter_list (type_specifier) (identifier) (type_specifier) (identifier)))))

=================
Vectors
=================

vector a = [0.0];
vector b = [1.0, 0.0];
vector c = [1.0, 1.0, 0.0];
---

  (source_file
    (declaration (type_specifier) (identifier) (vector (float)))
    (declaration (type_specifier) (identifier) (vector (float) (float)))
    (declaration (type_specifier) (identifier) (vector (float) (float) (float))))


=================
while do
=================
